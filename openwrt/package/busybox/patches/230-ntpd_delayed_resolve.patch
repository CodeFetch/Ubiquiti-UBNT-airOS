--- a/networking/ntpd.c
+++ b/networking/ntpd.c
@@ -261,14 +261,15 @@ typedef struct {
 	double d_recv_time;
 	double d_dispersion;
 } datapoint_t;
 
 typedef struct {
 	len_and_sockaddr *p_lsa;
 	char             *p_dotted;
+	char             *p_hostname;
 	int              p_fd;
 	int              datapoint_idx;
 	uint32_t         lastpkt_refid;
 	uint8_t          lastpkt_status;
 	uint8_t          lastpkt_stratum;
 	uint8_t          reachable_bits;
 	/* when to send new query (if p_fd == -1)
@@ -762,16 +763,17 @@ reset_peer_stats(peer_t *p, double offse
 
 static void
 add_peers(const char *s)
 {
 	peer_t *p;
 
 	p = xzalloc(sizeof(*p));
-	p->p_lsa = xhost2sockaddr(s, 123);
-	p->p_dotted = xmalloc_sockaddr2dotted_noport(&p->p_lsa->u.sa);
+	p->p_hostname = s;
+	p->p_lsa = NULL;
+	p->p_dotted = NULL;
 	p->p_fd = -1;
 	p->p_xmt_msg.m_status = MODE_CLIENT | (NTP_VERSION << 3);
 	p->next_action_time = G.cur_time; /* = set_next(p, 0); */
 	reset_peer_stats(p, 16 * STEP_THRESHOLD);
 
 	llist_add_to(&G.ntp_peers, p);
 	G.peer_cnt++;
@@ -812,14 +814,33 @@ send_query_to_peer(peer_t *p)
 	 * write(2, "ntpd: entering poll 15 secs\n", 28) = 28
 	 * poll([{fd=3, events=POLLIN}], 1, 15000) = 1 ([{fd=3, revents=POLLIN}])
 	 * recv(3, "yyy", 68, MSG_DONTWAIT) = 48
 	 * ^^^ this recv will receive packets to any local port!
 	 *
 	 * Uncomment this and use strace to see it in action:
 	 */
+
+	/* See if the peer hostname already resolved yet, if not, retry to resolv and return on failure */
+	if (!p->p_lsa)
+	{
+		p->p_lsa = host2sockaddr(p->p_hostname, 123);
+
+		if (p->p_lsa)
+		{
+			p->p_dotted = xmalloc_sockaddr2dotted_noport(&p->p_lsa->u.sa);
+			VERB1 bb_error_msg("resolved peer %s to %s", p->p_hostname, p->p_dotted);
+		}
+		else
+		{
+			set_next(p, RETRY_INTERVAL);
+			VERB1 bb_error_msg("could not resolve peer %s, skipping", p->p_hostname);
+			return;
+		}
+	}
+
 #define PROBE_LOCAL_ADDR /* { len_and_sockaddr lsa; lsa.len = LSA_SIZEOF_SA; getsockname(p->query.fd, &lsa.u.sa, &lsa.len); } */
 
 	if (p->p_fd == -1) {
 		int fd, family;
 		len_and_sockaddr *local_lsa;
 
 		family = p->p_lsa->u.sa.sa_family;
