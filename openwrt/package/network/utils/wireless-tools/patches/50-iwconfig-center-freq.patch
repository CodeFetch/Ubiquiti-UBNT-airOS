--- a/iwconfig.c
+++ b/iwconfig.c
@@ -385,6 +385,13 @@ display_info(struct wireless_info *	info
   if(tokens > 0)
     printf("\n          ");
 
+  /* display center frequency */
+  if(info->b.center1_freq)
+    {
+      iw_print_freq_value(buffer, sizeof(buffer), info->b.center1_freq);
+      printf("Center1-Freq: %s\n", buffer);
+	}
+
   /* Display encryption information */
   /* Note : we display only the "current" key, use iwlist to list all keys */
   if(info->b.has_key)
@@ -806,6 +813,48 @@ set_freq_info(int		skfd,
 
 /*------------------------------------------------------------------*/
 /*
+ * Set center1 frequency
+ */
+static int
+set_center1_info(int		skfd,
+	      char *		ifname,
+	      char *		args[],		/* Command line args */
+	      int		count)		/* Args count */
+{
+	struct iwreq		wrq;
+	int			i = 1;
+	double		freq;
+	char *		unit;
+
+	if(!strcasecmp(args[0], "auto")) {
+		wrq.u.freq.m = -1;
+		wrq.u.freq.e = 0;
+	} else {
+		freq = strtod(args[0], &unit);
+		if(unit == args[0]) {
+			errarg = 0;
+			return(IWERR_ARG_TYPE);
+		}
+		if(unit != NULL) {
+			if(unit[0] == 'G') freq *= GIGA;
+			if(unit[0] == 'M') freq *= MEGA;
+			if(unit[0] == 'k') freq *= KILO;
+		}
+
+		iw_float2freq(freq, &(wrq.u.freq));
+	}
+
+	wrq.u.freq.flags = 0xc1;
+
+	if(iw_set_ext(skfd, ifname, SIOCSIWFREQ, &wrq) < 0)
+		return(IWERR_SET_EXT);
+
+	/* Var args */
+	return(i);
+}
+
+/*------------------------------------------------------------------*/
+/*
  * Set Bit Rate
  */
 static int
@@ -1708,6 +1757,8 @@ static const struct iwconfig_entry iwcon
 	"Set Frequency",		"N.NNN[k|M|G]" },
   { "channel",		set_freq_info,		1,	SIOCSIWFREQ,
 	"Set Frequency",		"N" },
+  { "center1",		set_center1_info,		1,	SIOCSIWFREQ,
+	"Set Center1 Frequency",		"N.NNN[k|M|G]" },
   { "bit",		set_bitrate_info,	1,	SIOCSIWRATE,
 	"Set Bit Rate",			"{N[k|M|G]|auto|fixed}" },
   { "rate",		set_bitrate_info,	1,	SIOCSIWRATE,
--- a/iwlib.c
+++ b/iwlib.c
@@ -702,6 +702,12 @@ iw_get_basic_config(int			skfd,
       info->freq = iw_freq2float(&(wrq.u.freq));
       info->freq_flags = wrq.u.freq.flags;
     }
+  /* Get Center frequency (0xC1) */
+  wrq.u.freq.flags = 0xc1;
+  if(iw_get_ext(skfd, ifname, SIOCGIWFREQ, &wrq) >= 0)
+    {
+      info->center1_freq = iw_freq2float(&(wrq.u.freq));
+    }
 
   /* Get encryption information */
   wrq.u.data.pointer = (caddr_t) info->key;
--- a/iwlib.h
+++ b/iwlib.h
@@ -177,6 +177,7 @@ typedef struct wireless_config
   int		has_freq;
   double	freq;			/* Frequency/channel */
   int		freq_flags;
+  double	center1_freq;			/* Center Frequency */
   int		has_key;
   unsigned char	key[IW_ENCODING_TOKEN_MAX];	/* Encoding key used */
   int		key_size;		/* Number of bytes */
